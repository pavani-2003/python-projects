## Image Processing ###

pip install exifread
pip install opencv-python
pip install ultralytics opencv-python


import cv2
import os
import exifread
import numpy as np
from ultralytics import YOLO
from datetime import datetime

# Load the YOLOv8 model (Make sure "yolov8n.pt" is downloaded)
model = YOLO("yolov8n.pt")

# Function to extract metadata from an image
def extract_metadata(image_path):
    metadata = {}
    try:
        with open(image_path, "rb") as f:
            tags = exifread.process_file(f)
        for tag, value in tags.items():
            metadata[tag] = str(value)
    except Exception as e:
        print(f"Error extracting metadata: {e}")
    return metadata

# Function to detect objects in an image
def detect_objects(image_path, output_path="output.jpg"):
    try:
        image = cv2.imread(image_path)
        if image is None:
            print(f"Error: Unable to read image {image_path}")
            return None

        # Perform object detection
        results = model(image)
        
        # Save annotated image
        for result in results:
            result.save(filename=output_path)
        
        return output_path
    except Exception as e:
        print(f"Error in object detection: {e}")
        return None

# Function to log forensic analysis results
def log_results(image_path, metadata, output_image):
    log_file = "forensic_log.txt"
    try:
        with open(log_file, "a") as f:
            f.write(f"\n=== Forensic Analysis - {datetime.now()} ===\n")
            f.write(f"Image File: {image_path}\n")
            f.write("Metadata Extracted:\n")
            for key, value in metadata.items():
                f.write(f"  {key}: {value}\n")
            f.write(f"Processed Image: {output_image}\n")
            f.write("=" * 50 + "\n")
        print(f"Results logged in {log_file}")
    except Exception as e:
        print(f"Error writing log file: {e}")

# Main function to analyze an image
def analyze_image(image_path):
    print(" Extracting metadata...")
    metadata = extract_metadata(image_path)

    print(" Performing object detection...")
    output_image = detect_objects(image_path)

    if output_image:
        print(" Logging results...")
        log_results(image_path, metadata, output_image)

    print(f" Analysis complete. Processed image saved as {output_image}")

# Example usage (Replace with actual image file)
image_file = "surveillance_image.jpg"  # Update with your image file path
if os.path.exists(image_file):
    analyze_image(image_file)
else:
    print(f"Error: File {image_file} not found.")



### Object Detection ###


import cv2
from ultralytics import YOLO

def detect_objects(image_path, output_path="output.jpg"):
    """Loads an image, detects objects using YOLOv8, and saves the processed image."""
    try:
        image = cv2.imread(image_path)
        if image is None:
            print(f"Error: Unable to read image {image_path}. Check the file path.")
            return None

        print(" Detecting objects in the image...")

        # Load the YOLO model (Ensure "yolov8n.pt" is downloaded)
        model = YOLO("yolov8n.pt")
        results = model(image)  # Perform object detection

        # Save the image with detected objects
        for result in results:
            result.save(filename=output_path)

        print(f"Object detection complete! Processed image saved as: {output_path}")
        return output_path
    except Exception as e:
        print(f" Error during object detection: {e}")
        return None

if _name_ == "_main_":
    image_file = "surveillance_image.jpg"  # Replace with your actual file path
    detect_objects(image_file)
